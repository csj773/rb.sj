// ==================== gcal.js ====================
import fs from "fs";
import path from "path";
import process from "process";
import { google } from "googleapis";
import dotenv from "dotenv";
dotenv.config();

// ------------------- ÌôòÍ≤ΩÎ≥ÄÏàò -------------------
const CALENDAR_ID = process.env.CALENDAR_ID || process.env.GOOGLE_CALENDAR_ID;
const GOOGLE_CALENDAR_CREDENTIALS = process.env.GOOGLE_CALENDAR_CREDENTIALS;
const GOOGLE_CALENDAR_TOKEN = process.env.GOOGLE_CALENDAR_TOKEN;

if (!CALENDAR_ID || !GOOGLE_CALENDAR_CREDENTIALS || !GOOGLE_CALENDAR_TOKEN) {
  console.error("‚ùå GOOGLE_CALENDAR_CREDENTIALS ÎòêÎäî TOKEN ÎàÑÎùΩ");
  process.exit(1);
}

// ------------------- Date Î≥ÄÌôò -------------------
export function convertDate(input) {
  if (!input || typeof input !== "string") return input;

  const parts = input.trim().split(/\s+/);
  if (parts.length < 2) return input;

  const now = new Date();
  const year = now.getFullYear();

  const monthMap = {
    Jan: "01", Feb: "02", Mar: "03", Apr: "04", May: "05", Jun: "06",
    Jul: "07", Aug: "08", Sep: "09", Oct: "10", Nov: "11", Dec: "12"
  };

  let month, dayStr;
  if (monthMap[parts[0]]) {
    month = monthMap[parts[0]];
    dayStr = parts[1].padStart(2, "0");
  } else {
    month = String(now.getMonth() + 1).padStart(2, "0");
    dayStr = parts[1].padStart(2, "0");
  }

  return `${year}.${month}.${dayStr}`;
}

// ------------------- Google Calendar Ïù∏Ï¶ù -------------------
const credentials = JSON.parse(GOOGLE_CALENDAR_CREDENTIALS);
const token = JSON.parse(GOOGLE_CALENDAR_TOKEN);

const { client_email, private_key } = credentials;
const auth = new google.auth.JWT({
  email: client_email,
  key: private_key,
  scopes: ["https://www.googleapis.com/auth/calendar"],
});
const calendar = google.calendar({ version: "v3", auth });

// ------------------- Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú -------------------
async function deleteExistingGcalEvents() {
  console.log("üóë Í∏∞Ï°¥ gcal.js Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú ÏãúÏûë...");

  const res = await calendar.events.list({
    calendarId: CALENDAR_ID,
    maxResults: 1000,
    singleEvents: true,
    orderBy: "startTime",
  });

  const events = res.data.items.filter(
    (e) => e.description && e.description.includes("CREATED_BY_GCALJS")
  );

  for (const event of events) {
    try {
      await calendar.events.delete({
        calendarId: CALENDAR_ID,
        eventId: event.id,
      });
    } catch (err) {
      if (err.code === 410) {
        console.warn(`‚ö†Ô∏è Ïù¥ÎØ∏ ÏÇ≠Ï†úÎêú Ïù¥Î≤§Ìä∏: ${event.summary}`);
      } else {
        console.error("‚ùå ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò:", err.message);
      }
    }
  }

  console.log("‚úÖ Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú ÏôÑÎ£å");
}

// ------------------- Ïù¥Î≤§Ìä∏ ÏóÖÎ°úÎìú -------------------
async function uploadToGoogleCalendar() {
  console.log("üöÄ Google Calendar ÏóÖÎ°úÎìú ÏãúÏûë");

  const rosterPath = path.join(process.cwd(), "output", "roster.json");
  if (!fs.existsSync(rosterPath)) {
    console.error("‚ùå roster.json ÌååÏùº ÏóÜÏùå");
    process.exit(1);
  }

  const crewData = JSON.parse(fs.readFileSync(rosterPath, "utf-8"));

  const seen = new Set();

  for (const ev of crewData) {
    const key = `${ev["DATE"]}_${ev["FLT NO"]}_${ev["FROM"]}_${ev["TO"]}`;
    if (seen.has(key)) continue;
    seen.add(key);

    const summary = ev["FLT NO"] || ev["DUTY"] || "Duty";
    const from = ev["FROM"] || "";
    const to = ev["TO"] || "";
    const crew = ev["CREW"] || "";

    let startDateTime = null;
    let endDateTime = null;
    let allDay = false;

    // ‚úàÔ∏è ÎπÑÌñâ ÏùºÏ†ï
    if (ev["STD(L)"] && ev["STA(L)"]) {
      startDateTime = new Date(ev["STD(L)"]);
      endDateTime = new Date(ev["STA(L)"]);
    }
    // üß≥ Check-in ÏùºÏ†ï
    else if (ev["C/I(L)"]) {
      startDateTime = new Date(ev["C/I(L)"]);
      endDateTime = new Date(ev["STD(L)"] || ev["C/I(L)"]);
    }
    // üò¥ REST / OFF / STBY Îì±
    else {
      allDay = true;
      const baseDate = ev["DATE"] || ev["BLH DATE"];
      if (baseDate) {
        const [year, month, day] = baseDate.split(".");
        startDateTime = new Date(`${year}-${month}-${day}T00:00:00`);
        endDateTime = new Date(`${year}-${month}-${day}T23:59:59`);
      }
    }

    const event = {
      summary: summary === "REST" ? "Rest" : `${summary} ${from}‚Üí${to}`,
      description: `CREATED_BY_GCALJS\nCrew: ${crew}`,
    };

    if (allDay && startDateTime && endDateTime) {
      event.start = { date: startDateTime.toISOString().split("T")[0] };
      event.end = { date: endDateTime.toISOString().split("T")[0] };
    } else if (startDateTime && endDateTime) {
      event.start = { dateTime: startDateTime.toISOString() };
      event.end = { dateTime: endDateTime.toISOString() };
    } else {
      console.warn(`‚ö†Ô∏è ${summary} ÏùºÏ†ïÏóê ÏãúÍ∞Ñ Ï†ïÎ≥¥ ÏóÜÏùå ‚Üí Í±¥ÎÑàÎúÄ`);
      continue;
    }

    try {
      await calendar.events.insert({
        calendarId: CALENDAR_ID,
        resource: event,
      });
      console.log(`‚úÖ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä ÏôÑÎ£å: ${event.summary}`);
    } catch (err) {
      console.error(`‚ùå ${event.summary} Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò:`, err.message);
    }
  }

  console.log("üéâ Google Calendar ÏóÖÎ°úÎìú ÏôÑÎ£å");
}

// ------------------- Ïã§Ìñâ -------------------
(async () => {
  try {
    await deleteExistingGcalEvents();
    await uploadToGoogleCalendar();
  } catch (err) {
    console.error("‚ùå Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò:", err);
    process.exit(1);
  }
})();




